#pragma once

#include <boost/preprocessor.hpp>

#define AMULET_METHOD_GET_TYPE(n, array) \
  BOOST_PP_TUPLE_ELEM(2, 0, BOOST_PP_ARRAY_ELEM(n, array))
#define AMULET_METHOD_GET_ARG(n, array) \
  BOOST_PP_TUPLE_ELEM(2, 1, BOOST_PP_ARRAY_ELEM(n, array))

#define AMULET_METHOD_ARG_LIST_REPEATER(z, n, array) \
  BOOST_PP_COMMA_IF(n) AMULET_METHOD_GET_TYPE(n, array) AMULET_METHOD_GET_ARG(n, array)

#define AMULET_METHOD_ARG_DEFS_REPEATER(z, n, array) \
  AMULET_METHOD_GET_TYPE(n, array) AMULET_METHOD_GET_ARG(n, array);

#define AMULET_METHOD_ARG_INITS_REPEATER(z, n, array) \
  BOOST_PP_COMMA_IF(n) AMULET_METHOD_GET_ARG(n, array)(AMULET_METHOD_GET_ARG(n, array))

#define AMULET_METHOD_ARG_CALL_REPEATER(z, n, array) \
  BOOST_PP_COMMA_IF(n) AMULET_METHOD_GET_ARG(n, array)

#define AMULET_METHOD_ARRAY_REPEAT(array, macro) \
  BOOST_PP_REPEAT(BOOST_PP_ARRAY_SIZE(array), macro, array)

#define AMULET_METHOD_ARG_LIST(array) \
  AMULET_METHOD_ARRAY_REPEAT(array, AMULET_METHOD_ARG_LIST_REPEATER)

#define AMULET_METHOD_ARG_DEFS(array) \
  AMULET_METHOD_ARRAY_REPEAT(array, AMULET_METHOD_ARG_DEFS_REPEATER)

#define AMULET_METHOD_ARG_INITS(array) \
  AMULET_METHOD_ARRAY_REPEAT(array, AMULET_METHOD_ARG_INITS_REPEATER)

#define AMULET_METHOD_ARG_CALL(array) \
  AMULET_METHOD_ARRAY_REPEAT(array, AMULET_METHOD_ARG_CALL_REPEATER)

#define AMULET_METHOD_TEMPLATE_DEF(arg) \
  BOOST_PP_IF(BOOST_PP_ARRAY_SIZE(arg), template < , ) \
  AMULET_METHOD_ARG_LIST(arg) \
  BOOST_PP_IF(BOOST_PP_ARRAY_SIZE(arg), > , )

#define AMULET_METHOD_TEMPLATE_PASS(arg) \
  BOOST_PP_IF(BOOST_PP_ARRAY_SIZE(arg), < , ) \
  AMULET_METHOD_ARG_CALL(arg) \
  BOOST_PP_IF(BOOST_PP_ARRAY_SIZE(arg), > , )

#define AMULET_METHOD_TEMPLATE(OVERRIDABLE_NAME, UNIQUE_NAME, TEMPLATE_ARG_ARRAY, TYPE_ARG_ARRAY, ...) \
  namespace detail \
  { \
    AMULET_METHOD_TEMPLATE_DEF(TEMPLATE_ARG_ARRAY) \
    struct UNIQUE_NAME##_args \
    { \
      UNIQUE_NAME##_args(AMULET_METHOD_ARG_LIST(TYPE_ARG_ARRAY)) \
      BOOST_PP_IF(BOOST_PP_ARRAY_SIZE(TYPE_ARG_ARRAY), : , ) \
      AMULET_METHOD_ARG_INITS(TYPE_ARG_ARRAY) \
      {} \
      AMULET_METHOD_ARG_DEFS(TYPE_ARG_ARRAY) \
      __VA_ARGS__ \
    }; \
    \
    template < \
      typename T \
      BOOST_PP_COMMA_IF(BOOST_PP_ARRAY_SIZE(TEMPLATE_ARG_ARRAY)) \
      AMULET_METHOD_ARG_LIST(TEMPLATE_ARG_ARRAY) \
    > \
    auto operator|( \
      T &self, \
      UNIQUE_NAME##_args AMULET_METHOD_TEMPLATE_PASS(TEMPLATE_ARG_ARRAY) &&args \
    ) { \
      return args.apply_(self); \
    } \
  } \
  \
  AMULET_METHOD_TEMPLATE_DEF(TEMPLATE_ARG_ARRAY) \
  auto OVERRIDABLE_NAME(AMULET_METHOD_ARG_LIST(TYPE_ARG_ARRAY)) { \
    return detail::UNIQUE_NAME##_args AMULET_METHOD_TEMPLATE_PASS(TEMPLATE_ARG_ARRAY) ( \
      AMULET_METHOD_ARG_CALL(TYPE_ARG_ARRAY) \
    ); \
  }

#define AMULET_METHOD(OVERRIDABLE_NAME, UNIQUE_NAME, TYPE_ARG_ARRAY, ...) \
  AMULET_METHOD_TEMPLATE(OVERRIDABLE_NAME, UNIQUE_NAME, (0, ()), TYPE_ARG_ARRAY, __VA_ARGS__)
